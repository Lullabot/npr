<?php

/**
 * Implements hook_permission().
 */
function npr_pull_permission() {
  return array(
    'pull NPR content' => array(
      'title' => t('Pull NPR content'),
      'description' => t('Pull NPR content to create local nodes on the site.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function npr_pull_menu() {
  $items = array();

  $items['admin/content/npr'] = array(
    'title' => 'Pull NPR Story',
    'description' => 'Retrieve a single story from the NPR API.',
    'access arguments' => array('pull NPR content'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('npr_pull_get_story'),
    'file' => 'npr_pull.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/services/npr/cron'] = array(
    'title' => 'Cron settings',
    'description' => 'Retrieve the following types of stories from NPR at every cron.',
    'access arguments' => array('administer npr api'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('npr_pull_cron_config'),
    'file' => 'npr_pull.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_cron().
 */
function npr_pull_cron() {
  pi_api_pull_pull_stories();
}

/**
 * Pulls NPR stories (according to config settings).
 */
function pi_api_pull_pull_stories() {
  $ids = variable_get('npr_pull_cron_query_ids', array());
  $today = format_date(REQUEST_TIME, 'custom', 'Y-m-d');
  $pub = variable_get('npr_pull_cron_publish_flag', 1);
  foreach ($ids as $id) {
    if ($id) {
      $params = array(
        'id' => $id,
        'startDate' => $today,
      );
      $NPR = npr_api_fetch_object($params);
      if (!empty($NPR->stories)) {
        foreach ($NPR->stories as $story) {
          $story->status = $pub;
          npr_pull_insert_story($story);
        }
      }
    }
  }
}

/**
 * Creates a new npr_story node from NPRMLEntity object
 */
function npr_pull_insert_story($story) {
  if (!npr_pull_story_exists($story->id)) {
    npr_pull_save_story($story);
  }
  else {
    // TODO :: add updating
    // using the date modified field from API
    // npr_pull_update_story($story);
    drupal_set_message(t("Story with ID=@id  already exists.", array('@id' => $story->id)));
  }
}

/**
 * Determines if a npr_story node with a certain npr_id already exists
 */
function npr_pull_story_exists($npr_id) {
  //dpm
  // de-bug :: remove
  if ($npr_id == 137047128) {
    return FALSE;
  }
  return npr_pull_get_nid_from_story_id($npr_id) > 0;
}

/**
 * Given an npr_id, finds a matching nid
 */
function npr_pull_get_nid_from_story_id($npr_id) {
  $query = new EntityFieldQuery;
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'npr_story')
    ->fieldCondition('field_npr_id', 'value', $npr_id, '=')
    ->execute();
  if (!empty($result['node'])) {
    $node = array_shift($result['node']);
    return $node->nid;
  }
}

/**
 * Converts an NPRMLEntity story object into a node object
 * and saves it to the DB (via form submit)
 */
function npr_pull_save_story($story) {
  /*
  TODO:
  
  DO:
  lastModifiedDate -- use for updates
  
  PUNT:
  plain text -- punt
  story_link -- different from link? -- punt
  link -- punt
  transcript - maybe punt on this
  slug -- not super-useful to typical station
  subtitle - find out if this is even used
  organization -- doesn't hurt to save this
  
  */
  module_load_include('inc', 'node', 'node.pages');

  $node = new stdClass();
  $form_state = array();
  $node = array(
    'type' => 'npr_story',
    'nid' => NULL,
    'status' => isset($story->status) ? $story->status : 1,
    'language' => LANGUAGE_NONE,
    'created' => isset($story->created) ? $story->created : strtotime($story->pubDate->value),
  );

  $form_state['values']['title'] = $story->title->value;
  $form_state['values']['field_npr_id'][LANGUAGE_NONE][0]['value'] = $story->id;
  $form_state['values']['date'] = date('Y-m-d H:i:s O', $node['created']);

  $form_state['values']['body'][LANGUAGE_NONE][0]['value'] = $story->body;
  $form_state['values']['body'][LANGUAGE_NONE][0]['summary'] = $story->teaser->value;
  $form_state['values']['field_npr_byline'][LANGUAGE_NONE][0]['value'] = $story->byline->name->value;
  $form_state['values']['npr_audio'][LANGUAGE_NONE][0]['value'] = $story->audio->id;
  $form_state['values']['npr_audio'][LANGUAGE_NONE][0]['title'] = $story->audio->title->value;
  $form_state['values']['npr_audio'][LANGUAGE_NONE][0]['description'] = $story->audio->description->value;
  $form_state['values']['npr_audio'][LANGUAGE_NONE][0]['duration'] = $story->audio->duration->value;
  $form_state['values']['npr_audio'][LANGUAGE_NONE][0]['mp3'] = $story->audio->format->mp3->value;
  $form_state['values']['npr_audio'][LANGUAGE_NONE][0]['rm'] = $story->audio->format->mediastream->value;
  $form_state['values']['npr_audio'][LANGUAGE_NONE][0]['wm'] = 'xxx';
  $form_state['values']['npr_audio'][LANGUAGE_NONE][0]['download'] = ($story->audio->permissions->download->allow == 'true');
  $form_state['values']['npr_audio'][LANGUAGE_NONE][0]['embed'] = ($story->audio->permissions->stream->allow == 'true');
  $form_state['values']['npr_audio'][LANGUAGE_NONE][0]['stream'] = ($story->audio->permissions->embed->allow == 'true');

  if (!empty($story->image)) {
    $npr_image = $story->image;
    // @TODO
    // clean up how we do collision prevention
    // rand() seems to hacky
    // there MUST be a cleaner way
    $file_name = $npr_image->id . rand();
    $file_uri = 'public://' . $file_name;
    
    // Download the image and create a local copy.
    $image_in = fopen($npr_image->src, 'rb');
    $image_out = fopen('public://' . $file_name, 'wb');
    stream_copy_to_stream($image_in, $image_out);
    fclose($image_in);
    fclose($image_out);
    
    $file = new stdClass();
    $file->filename = $file_name;
    $file->uri = $file_uri;
    global $user;
    $file->uid = $user->uid;
    $file->filemime = 'image/jpeg';
    $file->file_size = filesize($file_uri);
    
    $saved_file = file_save($file);
    $saved_file->display = 1;
    $form_state['values']['field_npr_image'][LANGUAGE_NONE][] = (array)$saved_file;
  }
  $form_state['values']['op'] = t('Save');
  $node = (object)$node;
  drupal_form_submit('npr_story_node_form', $form_state, $node);
  drupal_set_message(t('Go to') . ' ' . l($node->title, 'node/' . $node->nid));
}