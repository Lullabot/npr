<?php

/**
 * @file
 * Calls NPR API, creates and parses NPR's flavor of XML (NPRML).
 */

use GuzzleHttp\Client;
use Drupal\npr_api\NprClient;

/**
 * Returns a nested array of info about all NPRML "fields".
 *
 * @return array
 *   An array of all NPRML "fields".
 */
function npr_api_get_nprml_fields() {
  $nprml_fields = [
    'id' => [
      'type' => 'attribute',
      'accepted_types' => ['text (plain)'],
      'description' => t('A unique identifier for the content.'),
    ],
    'subtitle' => [
      'type' => 'text',
      'accepted_types' => ['Text (plain)'],
      'description' => t('A short, sentence-like description of the returned story.'),
    ],
    'shortTitle' => [
      'type' => 'text',
      'accepted_types' => ['Text (plain)'],
      'description' => t('An abbreviated title for the returned story, not to exceed 30 characters.'),
    ],
    'miniTeaser' => [
      'type' => 'text',
      'accepted_types' => ['Text (plain)'],
      'description' => t('An abbreviated abstract for the returned story, describing what the story is about.'),
    ],
    'slug' => [
      'type' => 'text',
      'accepted_types' => ['Text (plain)'],
      'description' => t('A short phrase or title used to indicate the story content.'),
    ],
    'image' => [
      'type' => 'image',
      'accepted_types' => ['Entity reference (image)'],
      'description' => t('An image related to the content.'),
    ],
    'audio' => [
      'type' => 'audio',
      'accepted_types' => ['Entity reference (audio)'],
      'description' => t('An audio file related to the content.'),
    ],
  ];
  return $nprml_fields;
}

/**
 * Creates an NprClient object, narrowed by query-type parameters.
 *
 * @param array $params
 *   An array of query-type parameters.
 *
 * @return object
 *   An NPRAPIDrupal object.
 */
function npr_api_fetch_object(array $params) {

  // Create a new NprClient with the default configuration.
  $defaults = NprClient::getDefaultConfiguration();
  // TODO. This is not cool at all.
  $client = new NprClient(new Client($defaults), \Drupal::entityTypeManager(), \Drupal::configFactory(), \Drupal::currentUser(), \Drupal::messenger());

  // Make a request.
  $client->getXmlStories($params);
  $client->parse();

  return $client;
}
